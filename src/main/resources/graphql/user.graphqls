extend type Query {
    users(username: String, page: Int = 0, size: Int = 10): UserPageResponse
    getUserById(id: ID!): UserDto
    getAllUsers: [UserDto]
}

extend type Mutation {
    login(input: LoginReqDto!): JwtResponse
    register(input: RegisterReqDto!): UserDto
    refreshToken(input: RefreshTokenReqDto!): JwtResponse!
    updateUser(id: ID, input: UpdateInput): UserDto
    deleteUser(id: ID!): Boolean
}

input RefreshTokenReqDto {
    refreshToken: String
}

input LoginReqDto {
    identifier: String
    password: String
}

input RegisterReqDto {
    username: String
    email: String
    password: String
    gender: Gender
    imageProfile: String
    roles: [Role]
}

input Role {
    id: ID
    roleName: String
}

input UpdateInput {
    id: ID
    username: String
    email: String
    password: String
    gender: Gender
    imageProfile: String
    roles: [Role]
}

type JwtResponse {
    accessToken: String
    refreshToken: String
}

type UserDto {
    id: ID
    username: String
    email: String
    imageProfile: String
    gender: Gender
    roles: [RoleDto!]
}

type RoleDto {
    id: ID
    roleName: String
}

enum Gender {
    MASCULINE,
    FEMININE,
    OTHER
}

type UserPageResponse {
    content: [UserDto]
    totalElements: Int
    totalPages: Int
    number: Int
    page: Int
    size: Int
    first: Boolean
    last: Boolean
}
